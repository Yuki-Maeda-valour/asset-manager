/**
 * This file was generated by Nexus Schema
 * Do not make changes to this file directly
 */


import type { Context } from "./../context"




declare global {
  interface NexusGen extends NexusGenTypes {}
}

export interface NexusGenInputs {
}

export interface NexusGenEnums {
  AssetType: "MONITOR" | "PC" | "SP" | "WIFI"
  Role: "ADMIN" | "USER"
}

export interface NexusGenScalars {
  String: string
  Int: number
  Float: number
  Boolean: boolean
  ID: string
}

export interface NexusGenObjects {
  Asset: { // root type
    createdAt?: string | null; // String
    id?: number | null; // Int
    name?: string | null; // String
    type?: NexusGenEnums['AssetType'] | null; // AssetType
    updatedAt?: string | null; // String
  }
  Mutation: {};
  Query: {};
  User: { // root type
    createdAt?: string | null; // String
    id?: number | null; // Int
    role?: NexusGenEnums['Role'] | null; // Role
    updatedAt?: string | null; // String
    username?: string | null; // String
  }
}

export interface NexusGenInterfaces {
}

export interface NexusGenUnions {
}

export type NexusGenRootTypes = NexusGenObjects

export type NexusGenAllTypes = NexusGenRootTypes & NexusGenScalars & NexusGenEnums

export interface NexusGenFieldTypes {
  Asset: { // field return type
    createdAt: string | null; // String
    id: number | null; // Int
    name: string | null; // String
    type: NexusGenEnums['AssetType'] | null; // AssetType
    updatedAt: string | null; // String
  }
  Mutation: { // field return type
    createAsset: NexusGenRootTypes['Asset'] | null; // Asset
    createUser: NexusGenRootTypes['User'] | null; // User
    deleteAsset: NexusGenRootTypes['Asset'] | null; // Asset
    deleteUser: NexusGenRootTypes['User'] | null; // User
    updateAsset: NexusGenRootTypes['Asset'] | null; // Asset
    updateUser: NexusGenRootTypes['User'] | null; // User
  }
  Query: { // field return type
    asset: NexusGenRootTypes['Asset'] | null; // Asset
    assets: Array<NexusGenRootTypes['Asset'] | null> | null; // [Asset]
    user: NexusGenRootTypes['User'] | null; // User
    users: Array<NexusGenRootTypes['User'] | null> | null; // [User]
  }
  User: { // field return type
    createdAt: string | null; // String
    id: number | null; // Int
    role: NexusGenEnums['Role'] | null; // Role
    updatedAt: string | null; // String
    username: string | null; // String
  }
}

export interface NexusGenFieldTypeNames {
  Asset: { // field return type name
    createdAt: 'String'
    id: 'Int'
    name: 'String'
    type: 'AssetType'
    updatedAt: 'String'
  }
  Mutation: { // field return type name
    createAsset: 'Asset'
    createUser: 'User'
    deleteAsset: 'Asset'
    deleteUser: 'User'
    updateAsset: 'Asset'
    updateUser: 'User'
  }
  Query: { // field return type name
    asset: 'Asset'
    assets: 'Asset'
    user: 'User'
    users: 'User'
  }
  User: { // field return type name
    createdAt: 'String'
    id: 'Int'
    role: 'Role'
    updatedAt: 'String'
    username: 'String'
  }
}

export interface NexusGenArgTypes {
  Mutation: {
    createAsset: { // args
      name?: string | null; // String
      type?: NexusGenEnums['AssetType'] | null; // AssetType
    }
    createUser: { // args
      role?: NexusGenEnums['Role'] | null; // Role
      username?: string | null; // String
    }
    deleteAsset: { // args
      id?: number | null; // Int
    }
    deleteUser: { // args
      id?: number | null; // Int
    }
    updateAsset: { // args
      id?: number | null; // Int
      name?: string | null; // String
      type?: NexusGenEnums['AssetType'] | null; // AssetType
    }
    updateUser: { // args
      id?: number | null; // Int
      role?: NexusGenEnums['Role'] | null; // Role
      username?: string | null; // String
    }
  }
  Query: {
    asset: { // args
      id?: number | null; // Int
    }
    user: { // args
      id?: number | null; // Int
    }
  }
}

export interface NexusGenAbstractTypeMembers {
}

export interface NexusGenTypeInterfaces {
}

export type NexusGenObjectNames = keyof NexusGenObjects;

export type NexusGenInputNames = never;

export type NexusGenEnumNames = keyof NexusGenEnums;

export type NexusGenInterfaceNames = never;

export type NexusGenScalarNames = keyof NexusGenScalars;

export type NexusGenUnionNames = never;

export type NexusGenObjectsUsingAbstractStrategyIsTypeOf = never;

export type NexusGenAbstractsUsingStrategyResolveType = never;

export type NexusGenFeaturesConfig = {
  abstractTypeStrategies: {
    isTypeOf: false
    resolveType: true
    __typename: false
  }
}

export interface NexusGenTypes {
  context: Context;
  inputTypes: NexusGenInputs;
  rootTypes: NexusGenRootTypes;
  inputTypeShapes: NexusGenInputs & NexusGenEnums & NexusGenScalars;
  argTypes: NexusGenArgTypes;
  fieldTypes: NexusGenFieldTypes;
  fieldTypeNames: NexusGenFieldTypeNames;
  allTypes: NexusGenAllTypes;
  typeInterfaces: NexusGenTypeInterfaces;
  objectNames: NexusGenObjectNames;
  inputNames: NexusGenInputNames;
  enumNames: NexusGenEnumNames;
  interfaceNames: NexusGenInterfaceNames;
  scalarNames: NexusGenScalarNames;
  unionNames: NexusGenUnionNames;
  allInputTypes: NexusGenTypes['inputNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['scalarNames'];
  allOutputTypes: NexusGenTypes['objectNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['unionNames'] | NexusGenTypes['interfaceNames'] | NexusGenTypes['scalarNames'];
  allNamedTypes: NexusGenTypes['allInputTypes'] | NexusGenTypes['allOutputTypes']
  abstractTypes: NexusGenTypes['interfaceNames'] | NexusGenTypes['unionNames'];
  abstractTypeMembers: NexusGenAbstractTypeMembers;
  objectsUsingAbstractStrategyIsTypeOf: NexusGenObjectsUsingAbstractStrategyIsTypeOf;
  abstractsUsingStrategyResolveType: NexusGenAbstractsUsingStrategyResolveType;
  features: NexusGenFeaturesConfig;
}


declare global {
  interface NexusGenPluginTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginInputTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginInputFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginSchemaConfig {
  }
  interface NexusGenPluginArgConfig {
  }
}